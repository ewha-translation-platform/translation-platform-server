generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model College {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  departments Department[]

  @@map("college")
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  college College  @relation(fields: [collegeId], references: [id])
  users   User[]
  Course  Course[]

  collegeId Int @map("college_id")

  @@map("department")
}

model User {
  id               Int                       @id @default(autoincrement())
  academicId       String                    @unique @map("academic_id")
  firstName        String                    @map("first_name")
  lastName         String                    @map("last_name")
  email            String                    @unique
  password         String
  department       Department                @relation(fields: [departmentId], references: [id])
  isAdmin          Boolean                   @map("is_admin")
  role             Role
  attendingClass   StudentAttendsClass[]
  assistingClass   AssistantAssistsClass[]
  instructingClass ProfessorInstructsClass[]
  submissions      Submission[]
  feedbacks        Feedback[]

  departmentId Int @map("department_id")

  @@map("user")
}

model Course {
  id         Int        @id @default(autoincrement())
  year       Int        @db.Year
  semester   Semester
  department Department @relation(fields: [departmentId], references: [id])
  code       String
  name       String

  classes      Class[]
  departmentId Int

  @@unique([year, semester, code, name])
  @@map("course")
}

model Class {
  id          Int                       @id @default(autoincrement())
  course      Course                    @relation(fields: [courseId], references: [id])
  classNumber Int                       @map("class_number")
  students    StudentAttendsClass[]
  assistants  AssistantAssistsClass[]
  professors  ProfessorInstructsClass[]
  assignments Assignment[]

  courseId Int @map("course_id")

  @@unique([courseId, classNumber])
  @@map("class")
}

model StudentAttendsClass {
  student User  @relation(fields: [studentId], references: [id])
  class   Class @relation(fields: [classId], references: [id])

  studentId Int @map("student_id")
  classId   Int @map("class_id")

  @@id([studentId, classId])
  @@map("student_attends_class")
}

model AssistantAssistsClass {
  assistant User  @relation(fields: [assistantId], references: [id])
  class     Class @relation(fields: [classId], references: [id])

  assistantId Int @map("assistant_id")
  classId     Int @map("class_id")

  @@id([assistantId, classId])
  @@map("assistant_assists_class")
}

model ProfessorInstructsClass {
  professor User  @relation(fields: [professorId], references: [id])
  class     Class @relation(fields: [classId], references: [id])

  professorId Int @map("professor_id")
  classId     Int @map("class_id")

  @@id([professorId, classId])
  @@map("professor_instructs_class")
}

model Assignment {
  id                 Int                @id @default(autoincrement())
  class              Class              @relation(fields: [classId], references: [id])
  name               String
  description        String             @db.Text
  weekNumber         Int                @map("week_number")
  dueDateTime        DateTime           @map("due_datetime")
  assignmentType     AssignmentType     @map("assignment_type")
  isPublic           Boolean            @default(false) @map("is_public")
  maxScore           Int                @default(100) @map("max_score")
  feedbackCategories FeedbackCategory[] @relation("categories_on_assignment")
  textFile           String             @map("text_file") @db.Text
  audioFile          Bytes?             @map("audio_file") @db.MediumBlob
  sequentialRegions  Json?              @map("sequential_regions")
  maxPlayCount       Int?               @default(0) @map("max_play_count")
  playbackRate       Float?             @default(1.0) @map("playback_rate")
  submissions        Submission[]
  staged             Boolean            @default(false)
  updatedDateTime    DateTime           @updatedAt @map("updated_datetime")

  classId Int @map("class_id")

  @@map("assignment")
}

model Submission {
  id              Int        @id @default(autoincrement())
  student         User       @relation(fields: [studentId], references: [id])
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
  textFile        String     @map("text_file") @db.Text
  audioFile       Bytes?     @map("audio_file") @db.MediumBlob
  playCount       Int?       @map("play_count")
  playbackRate    Float?     @map("playback_rate")
  staged          Boolean    @default(false)
  generalReview   String?    @map("general_review") @db.Text
  score           Int?
  feedbacks       Feedback[]
  graded          Boolean    @default(false)
  updatedDateTime DateTime   @updatedAt @map("updated_datetime")

  studentId    Int @map("student_id")
  assignmentId Int @map("assignment_id")

  @@unique([assignmentId, studentId, staged])
  @@map("submission")
}

model Feedback {
  id                 Int                @id @default(autoincrement())
  submission         Submission         @relation(fields: [submissionId], references: [id])
  professor          User               @relation(fields: [professorId], references: [id])
  selectedIdx        Json               @map("selected_idx")
  selectedSourceText Boolean            @default(false) @map("seletedSourceText")
  comment            String?
  categories         FeedbackCategory[] @relation("categories_on_feedback")
  staged             Boolean            @default(false)

  submissionId Int @map("submission_id")
  professorId  Int @map("professor_id")

  @@map("feedback")
}

model FeedbackCategory {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  assignment Assignment[] @relation("categories_on_assignment")
  feedbacks  Feedback[]   @relation("categories_on_feedback")

  @@map("feedback_category")
}

enum AssignmentType {
  TRANSLATION
  SIMULTANEOUS
  SEQUENTIAL
}

enum Semester {
  SPRING
  SUMMER
  FALL
  WINTER
}

enum Role {
  PROFESSOR
  STUDENT
  ASSISTANT
}
